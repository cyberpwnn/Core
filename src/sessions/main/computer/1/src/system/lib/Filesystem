sh.require("CPI")

local File = CPI.object()

local files = {}

function opena(dir)
  if exists(dir) then
    return open(dir, "a")
  else
    return open(dir, "w")
  end
end

function open(dir, mode)
  local self = CPI.object(File)
  self.dir = dir
  self.mode = mode
  
  if exists(self.dir) == false and mode ~= "w" then
    sh.out("ERROR: FILE NOT FOUND: " .. dir)
  else
    self.o = fs.open(dir, mode)
    if register(dir) == false then
      return nil
    end
    return self
  end
  
  return nil
end

function File:readLine()
  return self.o.readLine()
end

function File:writeLine(s)
  self.o.writeLine(s)
end

function File:write(s)
  self.o.write(s)
end

function File:flush()
  self.o.flush()
end

function File:close()
  self.o.close()
  unregister(self.dir)
end

function exists(dir)
  if fs.exists(dir) then
    return true
  end
  
  return false
end

function register(dir)
  if fs.exists(dir) then
    for i,v in ipairs(files) do
      if v == dir then
        sh.out("File already in use: " .. dir)
        return false
      end
    end
    table.insert(files, dir)
    return true
  else
    return false
  end
end

function unregister(dir)
  for i,v in ipairs(files) do
    if v == dir then
      table.remove(files, i)
      return true
    end
  end
  
  return false
end

function isRegistered(dir)
  for i,v in ipairs(files) do
    if v == dir then
       return true
    end
  end
  
  return false
end

function getRegistered()
  return files
end

function delete(dir)
  fs.delete(dir)
end

function makeDir(dir)
  fs.makeDir(dir)
end