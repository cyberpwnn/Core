sh.require("CPI")
sh.require("Terminal")
sh.require("Color")
sh.require("Logger")

local C = Color.get()
local L = Logger.newChannel("Renderer")
local T = Terminal.newCursor()

local Shape = {}
  Shape.box = 1

local sid = 0
local SHAPE = {}

local Box = CPI.object()

function newBox(x,y,w,h,t,b)
  T:clear()
  local self = CPI.object(Box)
  
  self.id = registerShape(Shape.box,x,y,w,h,t,b)
  
  return self
end

function render()
  for i,v in ipairs(SHAPE) do
    local m,x,y,w,h,t,b = unpack(v)
    --L:inf('Shape: ' .. i .. ' @ ' .. x .. ',' .. y .. ' - ' .. w .. ',' .. h)
    
    T:drawBox(x,y,w,h,t,b,' ')
  end
end

function registerShape(m,x,y,w,h,t,b)
  local id = newID()
  SHAPE[id] = {m,x,y,w,h,t,b}
  return id
end

function fRegisterShape(id,m,x,y,w,h,t,b)
  return {m,x,y,w,h,t,b}
end

function unregisterShape(id)
  SHAPE[id] = nil
end

function moveShape(id,x,y)
  if not isShape(id) then return false end
  m,_,_,w,h,t,b = unpack(SHAPE[id])
  SHAPE[id] = fRegisterShape(id,m,x,y,w,h,t,b)
end

function resizeShape(id,w,h)
  if not isShape(id) then return false end
  m,x,y,_,_,t,b = unpack(SHAPE[id])
  SHAPE[id] = fRegisterShape(id,m,x,y,w,h,t,b)
end

function colorShape(id,t,b)
  if not isShape(id) then return false end
  m,x,y,w,h,_,_ = unpack(SHAPE[id])
  SHAPE[id] = fRegisterShape(id,m,x,y,w,h,t,b)
end

function isShape(id)
  if SHAPE[id] == nil then
    return false
  end
  
  return true
end

function newID()
  sid = sid + 1
  return sid
end