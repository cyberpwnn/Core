local w, h = term.getSize()
local tAPIsLoading = {}
local API = {}
local dirLib = "/system/lib/"
local command = 
{
  function(c) if c == "cls" or c == "clear" then clear() end end,
  function(c) if c == "?" or c == "help" then help() end end,
  function(c) if c == "reboot" or c == "restart" then restart() end end,
  function(c) if c == "shutdown" or c == "exit" then shutdown() end end,
  function(c) if c == "logger clear" then clearLogs() end end
}

function start()
  clear()
  fi = fs.open("/system/shell/version.str", "r")
  ver = fi.readLine()
  fi.close()
  
  out("Loading Libraries...")
  
  loadAPIs()

  out("Shell V" .. ver .. " started.")
  
  debug()
  
  while true do
    entry()
  end
end

function entry()
  term.setCursorPos(1, h)
  term.write("> ")
  process(read())
end

function process(message)
  if message ~= "" then
    for i,v in ipairs(command) do
      v(message)
    end
  end
end

function clear()
  term.setCursorPos(1,1)
  term.setTextColor(colors.black)
  term.setBackgroundColor(colors.white)
  term.clear()
  term.setCursorPos(1, h)
end

function out(message, color)
  if color == nil then color = colors.black end
  term.setTextColor(color)
  term.setCursorPos(1, h)
  term.write(string.rep(" ", w))
  term.setCursorPos(1, h)
  term.write(message)
  term.scroll(1)
  term.setTextColor(colors.black)
end

function help()
  out("This is the SW-Layer of core.")
  out("  - clear(cls), help(?)")
  out("  - reboot(restart), shutdown(exit)")
  out("  - logger clear")
end

function restart()
  out("RESTARTING!")
  os.reboot()
end

function shutdown()
  out("STOPPING!")
  os.shutdown()
end

function loadAPI(path)
    local sName = fs.getName(path)
    if tAPIsLoading[sName] == true then
        printError( "API "..sName.." is already being loaded" )
        return false
    end
    tAPIsLoading[sName] = true
        
    local tEnv = {}
    setmetatable( tEnv, { __index = _G } )
    local fnAPI, err = loadfile(path)
    if fnAPI then
        setfenv( fnAPI, tEnv )
        fnAPI()
    else
        printError( err )
        tAPIsLoading[sName] = nil
        return false
    end
    
    local tAPI = {}
    for k,v in pairs( tEnv ) do
        tAPI[k] =  v
    end
    
    _G[sName] = tAPI    
    tAPIsLoading[sName] = nil
    table.insert(API, path)
    out("Loaded " .. path)
    return true
end

function unloadAPI( _sName )
    if _sName ~= "_G" and type(_G[_sName]) == "table" then
        _G[_sName] = nil
    end
end

function isAPILoaded(dir)
  for i,v in ipairs(API) do
    if v == dir then
      return true
    end
  end
  
  return false
end

function loadAPIs()
  out("Starting Library Build...")
  
  if fs.exists(dirLib) then
    out("Found Lib folder")
    
    local dirs = {}
    
    out("Scanning Libraries...")
    
    for i,v in ipairs(fs.list(dirLib)) do
      table.insert(dirs, dirLib .. v)
    end
    
    for i,v in ipairs(dirs) do
      if isAPILoaded(v) == false then
        out("Loading " .. v)
        loadAPI(v)
      end
    end
  else
    out("Cannot find lib folder!")
  end
end

function require(dir)
  if fs.exists(dir) then
    if isAPILoaded(dir) == false then
      out("Waiting for " .. dir)
      loadAPI(dir)
    end
  else
    if fs.exists(dirLib..dir) then
      dir = dirLib..dir
      if isAPILoaded(dir) == false then
        out("Waiting for " .. dir)
        loadAPI(dir)
      end
    else
      out("ERROR: Cannot find " .. dir)
    end
  end
end

function clearLogs()
  Logger.clearLogs()
  out("Cleared all Logs")
end

function debug()
  out("Starting DEBUG Testing")
  
  
  
  Logger.clearLogs()
  
  out("Ending DEBUG Testing")
end